{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nexus Git Nexus Git provides access to Git repositories in Roblox Studio. It uses existing project structures (like Rojo) to allow developers who don't use external editors to contribute to Git-based repositories. Currently Supported Project Structures As part of Alpha release 0.1.0, Rojo 0.4 is the only project supported. For the second release, Rojo 0.5 and newer will be supported. For other project structures, please make GitHub issues for requesting support.","title":"Home"},{"location":"#nexus-git","text":"Nexus Git provides access to Git repositories in Roblox Studio. It uses existing project structures (like Rojo) to allow developers who don't use external editors to contribute to Git-based repositories.","title":"Nexus Git"},{"location":"#currently-supported-project-structures","text":"As part of Alpha release 0.1.0, Rojo 0.4 is the only project supported. For the second release, Rojo 0.5 and newer will be supported. For other project structures, please make GitHub issues for requesting support.","title":"Currently Supported Project Structures"},{"location":"building/","text":"Building Prerequisites Before starting, you should be familiar with Git and already have it installed. For building both the client and the server, you will need to clone the repository. To your file system. This can be done with the following: $ git clone https://github.com/TheNexusAvenger/Nexus-Git For building the client, you will need to have Rojo for syncing files into Roblox Studio, or Nexus Git already installed. For building the server, you will need .NET Core SDK for the platform you are running. Version 3.0 or higher is required with how it is set up. Optionally, Python can be installed for running the script that compiles platform-specific builds of Nexus Git and copies them to a central repository. Building the Client The Nexus Git Client (plugin for Roblox Studio) is avaliable for purchase from the Roblox Plugin Marketplace, but can also be build from the repository. Open a Roblox Studio session an enable the HttpService. Whether using Rojo or Nexus Git, both require using the HttpService to communicate with the client. Using Rojo Enable Rojo by starting it in the command line. $ rojo serve Sync into Roblox Studio using either a one-time sync in or contionous syncing using the Rojo Roblox Studio plugin. In Roblox Studio, right click on the root ModuleScript named NexusGit in ServerStorage and either save it as a model file or as a local plugin. It should be saved to your Roblox/plugins directory. If it doesn't exist, create the directory. The specific path is platform and install specific, but for a default Winodws install, it is %localappdata%/Roblox/plugins . Using Nexus Git Enable Nexus Git by starting it in the command line. $ nexusgit serve Sync into Roblox Studio using either a local pull Nexus Git Roblox Studio plugin. In Roblox Studio, right click on the root ModuleScript named NexusGit in ServerStorage and either save it as a model file or as a local plugin. It should be saved to your Roblox/plugins directory. If it doesn't exist, create the directory. The specific path is platform and install specific, but for a default Winodws install, it is %localappdata%/Roblox/plugins . Building the Server Having .NET Core installed is required, but Python is optional. For this, there is 2 options to build. With Python In the server directory, there is a script that generates and moves the platform-exclusive executables to a single directory. The script can be run with the following: $ python server / Publisher . py compiler [ platform ] Using a normal install with the path variables correct, the supported platforms can be generated into server/bin with teh following: $ python server/Publisher.py dotnet If you don't have dotnet as a path variable, you can specify the full path. For a normal Windows install, it would look like this. $ python server/Publisher.py C:/Program \\ Files/dotnet/dotnet.exe In case you need a specific platform, the platform can be specified. The platforms supported by .NET Core in corefx/runtime.json in the .NET Core repository. As an example, compiling for ARM 64-bit on Windows (not tested for by Nexus Git) can be done with the following: $ python server/Publisher.py dotnet win-arm64 Without Python .NET Core's method for creating platform-specific executables is known as \"publishing\". When publishing in .NET Core, it does the following: - Gets the packages from NuGet. - Compiles the program. - Packages it into an executable. - .NET Core 3.0 is used because packaging into a single executable was added. To publish the executable, the following command is used: dotnet publish - r [ platform ] - c Release server / NexusGit . sln Using the example above for ARM 64-bit on Windows, the command is the following: dotnet publish - r win - arm64 - c Release server / NexusGit . sln After running the command, the platform executable can be found in server/NexusGit/bin/Release/NET_CORE_VERSION/PLATFORM/publish . If .NET Core 3.0 or newer is used, there will be an executable and a .pdb file. Only the executable is needed.","title":"Building"},{"location":"building/#building","text":"","title":"Building"},{"location":"building/#prerequisites","text":"Before starting, you should be familiar with Git and already have it installed. For building both the client and the server, you will need to clone the repository. To your file system. This can be done with the following: $ git clone https://github.com/TheNexusAvenger/Nexus-Git For building the client, you will need to have Rojo for syncing files into Roblox Studio, or Nexus Git already installed. For building the server, you will need .NET Core SDK for the platform you are running. Version 3.0 or higher is required with how it is set up. Optionally, Python can be installed for running the script that compiles platform-specific builds of Nexus Git and copies them to a central repository.","title":"Prerequisites"},{"location":"building/#building-the-client","text":"The Nexus Git Client (plugin for Roblox Studio) is avaliable for purchase from the Roblox Plugin Marketplace, but can also be build from the repository. Open a Roblox Studio session an enable the HttpService. Whether using Rojo or Nexus Git, both require using the HttpService to communicate with the client.","title":"Building the Client"},{"location":"building/#using-rojo","text":"Enable Rojo by starting it in the command line. $ rojo serve Sync into Roblox Studio using either a one-time sync in or contionous syncing using the Rojo Roblox Studio plugin. In Roblox Studio, right click on the root ModuleScript named NexusGit in ServerStorage and either save it as a model file or as a local plugin. It should be saved to your Roblox/plugins directory. If it doesn't exist, create the directory. The specific path is platform and install specific, but for a default Winodws install, it is %localappdata%/Roblox/plugins .","title":"Using Rojo"},{"location":"building/#using-nexus-git","text":"Enable Nexus Git by starting it in the command line. $ nexusgit serve Sync into Roblox Studio using either a local pull Nexus Git Roblox Studio plugin. In Roblox Studio, right click on the root ModuleScript named NexusGit in ServerStorage and either save it as a model file or as a local plugin. It should be saved to your Roblox/plugins directory. If it doesn't exist, create the directory. The specific path is platform and install specific, but for a default Winodws install, it is %localappdata%/Roblox/plugins .","title":"Using Nexus Git"},{"location":"building/#building-the-server","text":"Having .NET Core installed is required, but Python is optional. For this, there is 2 options to build.","title":"Building the Server"},{"location":"building/#with-python","text":"In the server directory, there is a script that generates and moves the platform-exclusive executables to a single directory. The script can be run with the following: $ python server / Publisher . py compiler [ platform ] Using a normal install with the path variables correct, the supported platforms can be generated into server/bin with teh following: $ python server/Publisher.py dotnet If you don't have dotnet as a path variable, you can specify the full path. For a normal Windows install, it would look like this. $ python server/Publisher.py C:/Program \\ Files/dotnet/dotnet.exe In case you need a specific platform, the platform can be specified. The platforms supported by .NET Core in corefx/runtime.json in the .NET Core repository. As an example, compiling for ARM 64-bit on Windows (not tested for by Nexus Git) can be done with the following: $ python server/Publisher.py dotnet win-arm64","title":"With Python"},{"location":"building/#without-python","text":".NET Core's method for creating platform-specific executables is known as \"publishing\". When publishing in .NET Core, it does the following: - Gets the packages from NuGet. - Compiles the program. - Packages it into an executable. - .NET Core 3.0 is used because packaging into a single executable was added. To publish the executable, the following command is used: dotnet publish - r [ platform ] - c Release server / NexusGit . sln Using the example above for ARM 64-bit on Windows, the command is the following: dotnet publish - r win - arm64 - c Release server / NexusGit . sln After running the command, the platform executable can be found in server/NexusGit/bin/Release/NET_CORE_VERSION/PLATFORM/publish . If .NET Core 3.0 or newer is used, there will be an executable and a .pdb file. Only the executable is needed.","title":"Without Python"},{"location":"contributing/","text":"Contributing Bugs and requests can be made through issues. Pull requests are open, but will only be accepted if they have the following: 1. A reason to be pulled. 2. Follow the existing coding standards (tabs, PascalCase, etc). 3. Unit tests are added as needed, and existing tests still pass or are changed as needed. 4. Comments are included. Alpha Version Warning Nexus Git is currently in Alpha. While the project has shipped, it may not be completely viable for production work since major bugs are known or being discovered. Before submitting a GitHub issue, you should check the Trello board to see if it is already known, and potentially pending a release. If the bug or feature request is not on the Trello board, it is probably not known and should be brought up.","title":"Contributing"},{"location":"contributing/#contributing","text":"Bugs and requests can be made through issues. Pull requests are open, but will only be accepted if they have the following: 1. A reason to be pulled. 2. Follow the existing coding standards (tabs, PascalCase, etc). 3. Unit tests are added as needed, and existing tests still pass or are changed as needed. 4. Comments are included.","title":"Contributing"},{"location":"contributing/#alpha-version-warning","text":"Nexus Git is currently in Alpha. While the project has shipped, it may not be completely viable for production work since major bugs are known or being discovered. Before submitting a GitHub issue, you should check the Trello board to see if it is already known, and potentially pending a release. If the bug or feature request is not on the Trello board, it is probably not known and should be brought up.","title":"Alpha Version Warning"}]}